#!/usr/local/bin/php -f
<?php

namespace RPurinton\poker;

class Card
{
    public function __construct(
        private Suit $suit,
        private Rank $rank
    ) {
    }
    public function getSuit(): Suit
    {
        return $this->suit;
    }
    public function getRank(): Rank
    {
        return $this->rank;
    }
    public function __toString(): string
    {
        return $this->rank->display() . $this->suit->display();
    }
}

class Casino
{
    public array $tables = [];
    public array $players = [];
    public Pot $vault;
    public function __construct(
        private string $name
    ) {
        $this->vault = new Pot(0);
    }
    public function __toString(): string
    {
        return $this->name;
    }
    public function getName(): string
    {
        return $this->name;
    }
    public function setName(string $name): void
    {
        if (strlen($name) < 3) {
            throw new \Exception('Name must be at least 3 characters.');
        }
        $this->name = $name;
    }
    public function addTable(Table $table): Table
    {
        $this->tables[] = $table;
        return $table;
    }
    public function addPlayer(Player $player): Player
    {
        $this->players[] = $player;
        return $player;
    }
    public function depositToVault(float $amount): void
    {
        $this->vault->add($amount);
    }
    public function withdrawFromVault(float $amount): void
    {
        $this->vault->remove($amount);
    }
    public function buyChips(Player $player, float $amount): void
    {
        $this->depositToVault($amount);
        $player->getBankroll()->add($amount);
    }
    public function cashOut(Player $player): void
    {
        $this->withdrawFromVault($player->getBankroll()->getAmount());
        $player->getBankroll()->setAmount(0);
    }
    public function cashOutPartial(Player $player, float $amount): void
    {
        $this->withdrawFromVault($amount);
        $player->getBankroll()->remove($amount);
    }
}

class Deck
{
    private $cards = [];
    public function __construct()
    {
        $this->cards = $this->createDeck();
    }
    public function getCards()
    {
        return $this->cards;
    }
    public function shuffle()
    {
        shuffle($this->cards);
    }
    public function cut()
    {
        $cut = rand(1, 51);
        $this->cards = array_merge(
            array_slice($this->cards, $cut),
            array_slice($this->cards, 0, $cut)
        );
    }
    public function dealCard(array &$destination): void
    {
        $destination[] = array_pop($this->cards);
    }
    private function createDeck()
    {
        $cards = [];
        foreach (Suit::toArray() as $suit) {
            foreach (Rank::toArray() as $rank) {
                $cards[] = new Card($suit, $rank);
            }
        }
        return $cards;
    }
    public function toString()
    {
        $deck = '';
        foreach ($this->cards as $card) {
            $deck .= $card . ' ';
        }
        return $deck;
    }
}

enum GameType: int
{
    case TEXAS_HOLDEM = 1;
    case OMAHA = 2;
    case OMAHA_HILO = 3;
    public function display()
    {
        return match ($this) {
            GameType::TEXAS_HOLDEM => 'Texas Hold \'Em',
            GameType::OMAHA => 'Omaha',
            GameType::OMAHA_HILO => 'Omaha Hi/Lo',
        };
    }
    public function num_hole_cards()
    {
        return match ($this) {
            GameType::TEXAS_HOLDEM => 2,
            GameType::OMAHA, GameType::OMAHA_HILO => 4,
        };
    }
}

class HandEvaluator
{
    public function __construct(private GameType $GameType)
    {
    }
    public function setGameType(GameType $GameType): void
    {
        $this->GameType = $GameType;
    }
    public function hand_toString(array $holeCards, array $communityCards): string
    {
        switch ($this->GameType) {
            case GameType::TEXAS_HOLDEM:
                return $this->hand_toString_texas($holeCards, $communityCards);
            case GameType::OMAHA;
                return $this->hand_toString_omaha_hi($holeCards, $communityCards);
            case GameType::OMAHA_HILO;
                return $this->hand_toString_omaha_hi($holeCards, $communityCards) . $this->hand_toString_omaha_lo($holeCards, $communityCards);
        }
    }
    public function hand_toString_texas(array $holeCards, array $communityCards): string
    {
        switch (true) {
            case $this->is_royal_flush($holeCards, $communityCards):
                return $this->royal_flush_toString($holeCards, $communityCards);
            case $this->is_straight_flush($holeCards, $communityCards):
                return $this->straight_flush_toString($holeCards, $communityCards);
            case $this->is_four_of_a_kind($holeCards, $communityCards):
                return $this->four_of_a_kind_toString($holeCards, $communityCards);
            case $this->is_full_house($holeCards, $communityCards):
                return $this->full_house_toString($holeCards, $communityCards);
            case $this->is_flush($holeCards, $communityCards):
                return $this->flush_toString($holeCards, $communityCards);
            case $this->is_straight($holeCards, $communityCards):
                return $this->straight_toString($holeCards, $communityCards);
            case $this->is_three_of_a_kind($holeCards, $communityCards):
                return $this->three_of_a_kind_toString($holeCards, $communityCards);
            case $this->is_two_pair($holeCards, $communityCards):
                return $this->two_pair_toString($holeCards, $communityCards);
            case $this->is_pair($holeCards, $communityCards):
                return $this->pair_toString($holeCards, $communityCards);
            case $this->is_high_card($holeCards, $communityCards):
                return $this->high_card_toString($holeCards, $communityCards);
        }
        return "Unknown";
    }
    public function hand_toString_omaha_hi(array $holeCards, array $communityCards): string
    {
        return "Omaha Hi";
    }
    public function hand_toString_omaha_lo(array $holeCards, array $communityCards): string
    {
        return "Omaha Lo";
    }
    private function is_royal_flush(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            $flush_string = "";
            foreach ($combo as $card) {
                $flush_string .= $card->getSuit()->display();
            }
            $flush = false;
            if (strpos($flush_string, "ccccc") !== false) $flush = true;
            if (strpos($flush_string, "ddddd") !== false) $flush = true;
            if (strpos($flush_string, "hhhhh") !== false) $flush = true;
            if (strpos($flush_string, "sssss") !== false) $flush = true;
            $straight = false;
            if (strpos($straight_string, "TJQKA") !== false) $straight = true;
            if ($flush && $straight) return true;
        }
        return false;
    }
    private function royal_flush_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            $flush_string = "";
            foreach ($combo as $card) {
                $flush_string .= $card->getSuit()->display();
            }
            $flush = null;
            if (strpos($flush_string, "ccccc") !== false) $flush = " of Clubs";
            if (strpos($flush_string, "ddddd") !== false) $flush = " of Diamonds";
            if (strpos($flush_string, "hhhhh") !== false) $flush = " of Hearts";
            if (strpos($flush_string, "sssss") !== false) $flush = " of Spades";
            $straight = false;
            if (strpos($straight_string, "TJQKA") !== false) $straight = true;
            if ($flush && $straight) return "Royal Flush" . $flush . " [" . implode("] [", $combo) . "]";
        }
    }
    private function is_straight_flush(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            $flush_string = "";
            foreach ($combo as $card) {
                $flush_string .= $card->getSuit()->display();
            }
            $flush = false;
            if (strpos($flush_string, "ccccc") !== false) $flush = true;
            if (strpos($flush_string, "ddddd") !== false) $flush = true;
            if (strpos($flush_string, "hhhhh") !== false) $flush = true;
            if (strpos($flush_string, "sssss") !== false) $flush = true;
            $straight = false;
            if (strpos($straight_string, "2345A") !== false) $straight = true;
            if (strpos($straight_string, "23456") !== false) $straight = true;
            if (strpos($straight_string, "34567") !== false) $straight = true;
            if (strpos($straight_string, "45678") !== false) $straight = true;
            if (strpos($straight_string, "56789") !== false) $straight = true;
            if (strpos($straight_string, "6789T") !== false) $straight = true;
            if (strpos($straight_string, "789TJ") !== false) $straight = true;
            if (strpos($straight_string, "89TJQ") !== false) $straight = true;
            if (strpos($straight_string, "9TJQK") !== false) $straight = true;
            if (strpos($straight_string, "TJQKA") !== false) $straight = true;
            if ($flush && $straight) return true;
        }
        return false;
    }
    private function straight_flush_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            $flush_string = "";
            foreach ($combo as $card) {
                $flush_string .= $card->getSuit()->display();
            }
            $flush = null;
            if (strpos($flush_string, "ccccc") !== false) $flush = " of Clubs";
            if (strpos($flush_string, "ddddd") !== false) $flush = " of Diamonds";
            if (strpos($flush_string, "hhhhh") !== false) $flush = " of Hearts";
            if (strpos($flush_string, "sssss") !== false) $flush = " of Spades";
            $straight = null;
            if (strpos($straight_string, "2345A") !== false) $straight = "5 High ";
            if (strpos($straight_string, "23456") !== false) $straight = "6 High ";
            if (strpos($straight_string, "34567") !== false) $straight = "7 High ";
            if (strpos($straight_string, "45678") !== false) $straight = "8 High ";
            if (strpos($straight_string, "56789") !== false) $straight = "9 High ";
            if (strpos($straight_string, "6789T") !== false) $straight = "Ten High ";
            if (strpos($straight_string, "789TJ") !== false) $straight = "Jack High ";
            if (strpos($straight_string, "89TJQ") !== false) $straight = "Queen High ";
            if (strpos($straight_string, "9TJQK") !== false) $straight = "King High ";
            if (strpos($straight_string, "TJQKA") !== false) $straight = "Royal ";
            if ($flush && $straight) {
                $possible[] = ["hand" => $combo, "card" => $straight, "flush" => $flush, "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
        }
        if (count($possible) === 1) return $possible[0]["card"] . " Straight Flush" . $possible[0]["flush"] . " [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_straight_flush($possible);
        return $possible[$best_hand_index]["card"] . " Straight Flush" . $possible[$best_hand_index]["flush"] . " [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_straight_flush(array $possible): int
    {
        $best_hand_index = 0;
        $last_kicker_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["kicker_rank"] > $last_kicker_value) $best_hand_index = $i;
        }
        return $best_hand_index;
    }
    private function is_four_of_a_kind(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $fok_string = "";
            foreach ($combo as $card) {
                $fok_string .= $card->getRank()->display();
            }
            if ($fok_string[0] === $fok_string[1] && $fok_string[1] === $fok_string[2] && $fok_string[2] === $fok_string[3]) return true;
            if ($fok_string[1] === $fok_string[2] && $fok_string[2] === $fok_string[3] && $fok_string[3] === $fok_string[4]) return true;
        }
        return false;
    }
    private function four_of_a_kind_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $fok_string = "";
            foreach ($combo as $card) {
                $fok_string .= $card->getRank()->display();
            }
            if ($fok_string[0] === $fok_string[1] && $fok_string[1] === $fok_string[2] && $fok_string[2] === $fok_string[3]) {
                $possible[] = ["hand" => $combo, "card" => $combo[0]->getRank()->display_long(), "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            } else if ($fok_string[1] === $fok_string[2] && $fok_string[2] === $fok_string[3] && $fok_string[3] === $fok_string[4]) {
                $possible[] = ["hand" => $combo, "card" => $combo[1]->getRank()->display_long(), "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[0]->getRank()->display_long()];
            }
        }
        if (count($possible) === 1) return "Four-of-a-Kind " . $possible[0]["card"] . "s [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_four_of_a_kind($possible);
        return "Four-of-a-Kind " . $possible[$best_hand_index]["card"] . "s [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_four_of_a_kind(array $possible): int
    {
        $best_hand_index = 0;
        $last_kicker_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["kicker_rank"] > $last_kicker_value) $best_hand_index = $i;
        }
        return $best_hand_index;
    }
    private function is_full_house(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        if (!$this->is_three_of_a_kind($holeCards, $communityCards)) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $full_house_string = "";
            foreach ($combo as $card) {
                $full_house_string .= $card->getRank()->display();
            }
            if ($full_house_string[0] === $full_house_string[1] && $full_house_string[1] === $full_house_string[2] && $full_house_string[3] === $full_house_string[4]) return true;
            if ($full_house_string[0] === $full_house_string[1] && $full_house_string[2] === $full_house_string[3] && $full_house_string[3] === $full_house_string[4]) return true;
        }
        return false;
    }
    private function full_house_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            if (!$this->is_three_of_a_kind($combo, [])) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $full_house_string = "";
            foreach ($combo as $card) {
                $full_house_string .= $card->getRank()->display();
            }
            if ($full_house_string[0] === $full_house_string[1] && $full_house_string[1] === $full_house_string[2] && $full_house_string[3] === $full_house_string[4]) {
                $possible[] = ["hand" => $combo, "card1_value" => $combo[0]->getRank()->numeric(), "card" => $combo[0]->getRank()->display_long(), "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            } else if ($full_house_string[0] === $full_house_string[1] && $full_house_string[2] === $full_house_string[3] && $full_house_string[3] === $full_house_string[4]) {
                $possible[] = ["hand" => $combo, "card1_value" => $combo[2]->getRank()->numeric(), "card" => $combo[2]->getRank()->display_long(), "kicker_rank" => $combo[0]->getRank()->numeric(), "kicker" => $combo[0]->getRank()->display_long()];
            }
        }
        if (count($possible) === 1) return $possible[0]["card"] . "s full of " . $possible[0]["kicker"] . "s [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_full_house($possible);
        return $possible[$best_hand_index]["card"] . "s full of " . $possible[$best_hand_index]["kicker"] . "s [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_full_house(array $possible): int
    {
        $best_hand_index = 0;
        $last_card1_value = 0;
        $last_kicker_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["card1_value"] > $last_card1_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_kicker_value = $possible[$i]["kicker_rank"];
            }
            if ($possible[$i]["card1_value"] == $last_card1_value && $possible[$i]["kicker_rank"] > $last_kicker_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_kicker_value = $possible[$i]["kicker_rank"];
            }
        }
        return $best_hand_index;
    }
    private function is_flush(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            $suits = [];
            foreach ($combo as $card) {
                $suits[] = $card->getSuit()->display();
            }
            $suits = array_unique($suits);
            if (count($suits) === 1) return true;
        }
        return false;
    }
    private function flush_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            $suits = [];
            foreach ($combo as $card) {
                $suits[] = $card->getSuit()->display();
            }
            $suits = array_unique($suits);
            if (count($suits) === 1) {
                usort($combo, function ($a, $b) {
                    return $a->getRank()->numeric() <=> $b->getRank()->numeric();
                });
                $possible[] = ["hand" => $combo, "suit" => $combo[0]->getSuit()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[3]->getRank()->numeric(), $combo[2]->getRank()->numeric(), $combo[1]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[3]->getRank()->display_long(), $combo[2]->getRank()->display_long(), $combo[1]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            }
        }
        if (count($possible) === 1) return $possible[0]["kickers"][0] . " High " . $possible[0]["suit"] . " Flush [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_flush($possible);
        return $possible[$best_hand_index]["kickers"][0] . " High " . $possible[$best_hand_index]["suit"] . " Flush [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_flush(array $possible): int
    {
                $best_hand_index = 0;
        $last_kicker1_value = 0;
        $last_kicker2_value = 0;
        $last_kicker3_value = 0;
        $last_kicker4_value = 0;
        $last_kicker5_value = 0;
        for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["kicker_ranks"][0] > $last_kicker1_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
                $last_kicker4_value = $possible[$i]["kicker_ranks"][3];
                $last_kicker5_value = $possible[$i]["kicker_ranks"][4];
            }
            if ($possible[$i]["kicker_ranks"][0] == $last_kicker1_value && $possible[$i]["kicker_ranks"][1] > $last_kicker2_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
                $last_kicker4_value = $possible[$i]["kicker_ranks"][3];
                $last_kicker5_value = $possible[$i]["kicker_ranks"][4];
            }
            if ($possible[$i]["kicker_ranks"][0] == $last_kicker1_value && $possible[$i]["kicker_ranks"][1] == $last_kicker2_value && $possible[$i]["kicker_ranks"][2] > $last_kicker3_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
                $last_kicker4_value = $possible[$i]["kicker_ranks"][3];
                $last_kicker5_value = $possible[$i]["kicker_ranks"][4];
            }
            if ($possible[$i]["kicker_ranks"][0] == $last_kicker1_value && $possible[$i]["kicker_ranks"][1] == $last_kicker2_value && $possible[$i]["kicker_ranks"][2] == $last_kicker3_value && $possible[$i]["kicker_ranks"][3] > $last_kicker4_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
                $last_kicker4_value = $possible[$i]["kicker_ranks"][3];
                $last_kicker5_value = $possible[$i]["kicker_ranks"][4];
            }
            if ($possible[$i]["kicker_ranks"][0] == $last_kicker1_value && $possible[$i]["kicker_ranks"][1] == $last_kicker2_value && $possible[$i]["kicker_ranks"][2] == $last_kicker3_value && $possible[$i]["kicker_ranks"][3] == $last_kicker4_value && $possible[$i]["kicker_ranks"][4] > $last_kicker5_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
                $last_kicker4_value = $possible[$i]["kicker_ranks"][3];
                $last_kicker5_value = $possible[$i]["kicker_ranks"][4];
            }
        }
        return $best_hand_index;
    }
    private function is_straight(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            if ($straight_string == "2345A") return true;
            if ($straight_string == "23456") return true;
            if ($straight_string == "34567") return true;
            if ($straight_string == "45678") return true;
            if ($straight_string == "56789") return true;
            if ($straight_string == "6789T") return true;
            if ($straight_string == "789TJ") return true;
            if ($straight_string == "89TJQ") return true;
            if ($straight_string == "9TJQK") return true;
            if ($straight_string == "TJQKA") return true;
        }
        return false;
    }
    private function straight_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $straight_string = "";
            foreach ($combo as $card) {
                $straight_string .= $card->getRank()->display();
            }
            if ($straight_string == "2345A") {
                $possible[] = ["hand" => $combo, "card" => "5", "kicker_rank" => $combo[3]->getRank()->numeric(), "kicker" => $combo[3]->getRank()->display_long()];
            }
            if ($straight_string == "23456") {
                $possible[] = ["hand" => $combo, "card" => "6", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "34567") {
                $possible[] = ["hand" => $combo, "card" => "7", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "45678") {
                $possible[] = ["hand" => $combo, "card" => "8", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "56789") {
                $possible[] = ["hand" => $combo, "card" => "9", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "6789T") {
                $possible[] = ["hand" => $combo, "card" => "Ten", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "789TJ") {
                $possible[] = ["hand" => $combo, "card" => "Jack", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "89TJQ") {
                $possible[] = ["hand" => $combo, "card" => "Queen", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "9TJQK") {
                $possible[] = ["hand" => $combo, "card" => "King", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
            if ($straight_string == "TJQKA") {
                $possible[] = ["hand" => $combo, "card" => "Ace", "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
            }
        }
        if (count($possible) === 1) return $possible[0]["card"] . " High Straight [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_straight($possible);
        return $possible[$best_hand_index]["card"] . " High Straight [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_straight(array $possible): int
    {
        $best_hand_index = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["kicker_rank"] > $possible[$best_hand_index]["kicker_rank"]) $best_hand_index = $i;
        }
        return $best_hand_index;
    }
    private function is_three_of_a_kind(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            for ($i = 0; $i < count($combo) - 2; $i++) {
                if ($combo[$i]->getRank() === $combo[$i + 1]->getRank() && $combo[$i + 1]->getRank() === $combo[$i + 2]->getRank()) return true;
            }
        }
        return false;
    }
    private function three_of_a_kind_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            if (!$this->is_three_of_a_kind($combo, [])) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            if ($combo[0]->getRank() === $combo[1]->getRank() && $combo[1]->getRank() === $combo[2]->getRank()) {
                $possible[] = ["hand" => $combo, "card" => $combo[0]->getRank()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[3]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[3]->getRank()->display_long()]];
            } else if ($combo[1]->getRank() === $combo[2]->getRank() && $combo[2]->getRank() === $combo[3]->getRank()) {
                $possible[] = ["hand" => $combo, "card" => $combo[1]->getRank()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            } else if ($combo[2]->getRank() === $combo[3]->getRank() && $combo[3]->getRank() === $combo[4]->getRank()) {
                $possible[] = ["hand" => $combo, "card" => $combo[2]->getRank()->display_long(), "kicker_ranks" => [$combo[1]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[1]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            }
        }
        if (count($possible) === 1) return "Three-of-a-kind " . $possible[0]["card"] . "s [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_three_of_a_kind($possible);
        return "Three-of-a-kind " . $possible[$best_hand_index]["card"] . "s [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_three_of_a_kind(array $possible): int
    {
        $best_hand_index = 0;
        $last_kicker1_value = 0;
        $last_kicker2_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["kicker_ranks"][0] > $last_kicker1_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
            } else if ($possible[$i]["kicker_ranks"][0] === $last_kicker1_value && $possible[$i]["kicker_ranks"][1] > $last_kicker2_value) {
                $best_hand_index = $i;
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
            }
        }
        return $best_hand_index;
    }
    private function is_two_pair(array $holeCards, array $communityCards): bool
    {
        if (count($holeCards) + count($communityCards) < 5) return false;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $pairs = 0;
            for ($i = 0; $i < count($combo) - 1; $i++) {
                if ($combo[$i]->getRank() === $combo[$i + 1]->getRank()) $pairs++;
            }
            if ($pairs === 2) return true;
        }
        return false;
    }
    private function two_pair_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            if (!$this->is_two_pair($combo, [])) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            $pairs = 0;
            for ($i = 0; $i < count($combo) - 1; $i++) {
                if ($combo[$i]->getRank() === $combo[$i + 1]->getRank()) $pairs++;
            }
            if ($pairs === 2) {
                if ($combo[0]->getRank() === $combo[1]->getRank() && $combo[2]->getRank() === $combo[3]->getRank()) {
                    $possible[] = ["hand" => $combo, "card1_value" => $combo[2]->getRank()->numeric(), "card1" => $combo[2]->getRank()->display_long(), "card2_value" => $combo[0]->getRank()->numeric(), "card2" => $combo[0]->getRank()->display_long(), "kicker_rank" => $combo[4]->getRank()->numeric(), "kicker" => $combo[4]->getRank()->display_long()];
                }
                if ($combo[0]->getRank() === $combo[1]->getRank() && $combo[3]->getRank() === $combo[4]->getRank()) {
                    $possible[] = ["hand" => $combo, "card1_value" => $combo[3]->getRank()->numeric(), "card1" => $combo[3]->getRank()->display_long(), "card2_value" => $combo[0]->getRank()->numeric(), "card2" => $combo[0]->getRank()->display_long(), "kicker_rank" => $combo[2]->getRank()->numeric(), "kicker" => $combo[2]->getRank()->display_long()];
                }
                if ($combo[1]->getRank() === $combo[2]->getRank() && $combo[3]->getRank() === $combo[4]->getRank()) {
                    $possible[] = ["hand" => $combo, "card1_value" => $combo[3]->getRank()->numeric(), "card1" => $combo[3]->getRank()->display_long(), "card2_value" => $combo[1]->getRank()->numeric(), "card2" => $combo[1]->getRank()->display_long(), "kicker_rank" => $combo[0]->getRank()->numeric(), "kicker" => $combo[0]->getRank()->display_long()];
                }
            }
        }
        if (count($possible) === 1) return "Two Pair " . $possible[0]["card1"] . "s over " . $possible[0]["card2"] . "s [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_two_pair($possible);
        return "Two Pair " . $possible[$best_hand_index]["card1"] . "s over " . $possible[$best_hand_index]["card2"] . "s [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_two_pair(array $possible): int
    {
        $best_hand_index = 0;
        $last_card1_value = 0;
        $last_card2_value = 0;
        $last_kicker_value = 0;
                for ($i = 0; $i < count($possible); $i++) {
            if ($possible[$i]["card1_value"] > $last_card1_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_kicker_value = $possible[$i]["kicker_rank"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] > $last_card2_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_kicker_value = $possible[$i]["kicker_rank"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] === $last_card2_value && $possible[$i]["kicker_rank"] > $last_kicker_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_kicker_value = $possible[$i]["kicker_rank"];
            }
        }
        return $best_hand_index;
    }
    private function is_pair(array $holeCards, array $communityCards): bool
    {
        if ($holeCards[0]->getRank() === $holeCards[1]->getRank()) return true;
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        foreach ($combos as $combo) {
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            for ($i = 0; $i < count($combo) - 1; $i++) {
                if ($combo[$i]->getRank() === $combo[$i + 1]->getRank()) return true;
            }
        }
        return false;
    }
    private function pair_toString(array $holeCards, array $communityCards): string
    {
        if ($holeCards[0]->getRank() === $holeCards[1]->getRank()) {
            return "Pair of " . $holeCards[0]->getRank()->display_long() . "s";
        }
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            if (count($combo) != 5) continue;
            if (!$this->is_pair($combo, [])) continue;
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            if ($combo[0]->getRank() === $combo[1]->getRank()) {
                $possible[] = ["hand" => $combo, "card_value" => $combo[0]->getRank()->numeric(), "card" => $combo[0]->getRank()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[3]->getRank()->numeric(), $combo[2]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[3]->getRank()->display_long(), $combo[2]->getRank()->display_long()]];
            } else if ($combo[1]->getRank() === $combo[2]->getRank()) {
                $possible[] = ["hand" => $combo, "card_value" => $combo[1]->getRank()->numeric(), "card" => $combo[1]->getRank()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[3]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[3]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            } else if ($combo[2]->getRank() === $combo[3]->getRank()) {
                $possible[] = ["hand" => $combo, "card_value" => $combo[2]->getRank()->numeric(), "card" => $combo[2]->getRank()->display_long(), "kicker_ranks" => [$combo[4]->getRank()->numeric(), $combo[1]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[4]->getRank()->display_long(), $combo[1]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            } else if ($combo[3]->getRank() === $combo[4]->getRank()) {
                $possible[] = ["hand" => $combo, "card_value" => $combo[3]->getRank()->numeric(), "card" => $combo[3]->getRank()->display_long(), "kicker_ranks" => [$combo[2]->getRank()->numeric(), $combo[1]->getRank()->numeric(), $combo[0]->getRank()->numeric()], "kickers" => [$combo[2]->getRank()->display_long(), $combo[1]->getRank()->display_long(), $combo[0]->getRank()->display_long()]];
            }
        }
        if (count($possible) === 1) return "Pair of " . $possible[0]["card"] . "s [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_pair($possible);
        return "Pair of " . $possible[$best_hand_index]["card"] . "s [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_pair(array $possible): int
    {
        $best_hand_index = 0;
        $last_card_value = 0;
        $last_kicker1_value = 0;
        $last_kicker2_value = 0;
        $last_kicker3_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["card_value"] > $last_card_value) {
                $best_hand_index = $i;
                $last_card_value = $possible[$i]["card_value"];
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
            } else if ($possible[$i]["card_value"] === $last_card_value && $possible[$i]["kicker_ranks"][0] > $last_kicker1_value) {
                $best_hand_index = $i;
                $last_card_value = $possible[$i]["card_value"];
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
            } else if ($possible[$i]["card_value"] === $last_card_value && $possible[$i]["kicker_ranks"][0] === $last_kicker1_value && $possible[$i]["kicker_ranks"][1] > $last_kicker2_value) {
                $best_hand_index = $i;
                $last_card_value = $possible[$i]["card_value"];
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
            } else if ($possible[$i]["card_value"] === $last_card_value && $possible[$i]["kicker_ranks"][0] === $last_kicker1_value && $possible[$i]["kicker_ranks"][1] === $last_kicker2_value && $possible[$i]["kicker_ranks"][2] > $last_kicker3_value) {
                $best_hand_index = $i;
                $last_card_value = $possible[$i]["card_value"];
                $last_kicker1_value = $possible[$i]["kicker_ranks"][0];
                $last_kicker2_value = $possible[$i]["kicker_ranks"][1];
                $last_kicker3_value = $possible[$i]["kicker_ranks"][2];
            }
        }
        return $best_hand_index;
    }
    private function is_high_card(array $holeCards, array $communityCards): bool
    {
        return true;
    }
    private function high_card_toString(array $holeCards, array $communityCards): string
    {
        $combos = $this->get_combos_texas($holeCards, $communityCards);
        $possible = [];
        foreach ($combos as $combo) {
            usort($combo, function ($a, $b) {
                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
            });
            if (count($combo) == 5) $possible[] = ["hand" => $combo, "card1_value" => $combo[4]->getRank()->numeric(), "card1" => $combo[4]->getRank()->display_long(), "card2_value" => $combo[3]->getRank()->numeric(), "card2" => $combo[3]->getRank()->display_long(), "card3_value" => $combo[2]->getRank()->numeric(), "card3" => $combo[2]->getRank()->display_long(), "card4_value" => $combo[1]->getRank()->numeric(), "card4" => $combo[1]->getRank()->display_long(), "card5_value" => $combo[0]->getRank()->numeric(), "card5" => $combo[0]->getRank()->display_long()];
            else $possible[] = ["hand" => $combo, "card1_value" => $combo[1]->getRank()->numeric(), "card1" => $combo[1]->getRank()->display_long(), "card2_value" => $combo[0]->getRank()->numeric(), "card2" => $combo[0]->getRank()->display_long()];
        }
        if (count($possible) === 1) return $possible[0]["card1"] . " High [" . implode("] [", $possible[0]["hand"]) . "]";
        $best_hand_index = $this->get_best_high_card($possible);
        return $possible[$best_hand_index]["card1"] . " High [" . implode("] [", $possible[$best_hand_index]["hand"]) . "]";
    }
    private function get_best_high_card(array $possible): int
    {
        $best_hand_index = 0;
        $last_card1_value = 0;
        $last_card2_value = 0;
        $last_card3_value = 0;
        $last_card4_value = 0;
        $last_card5_value = 0;
                for ($i = 1; $i < count($possible); $i++) {
            if ($possible[$i]["card1_value"] > $last_card1_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_card3_value = $possible[$i]["card3_value"];
                $last_card4_value = $possible[$i]["card4_value"];
                $last_card5_value = $possible[$i]["card5_value"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] > $last_card2_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_card3_value = $possible[$i]["card3_value"];
                $last_card4_value = $possible[$i]["card4_value"];
                $last_card5_value = $possible[$i]["card5_value"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] === $last_card2_value && $possible[$i]["card3_value"] > $last_card3_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_card3_value = $possible[$i]["card3_value"];
                $last_card4_value = $possible[$i]["card4_value"];
                $last_card5_value = $possible[$i]["card5_value"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] === $last_card2_value && $possible[$i]["card3_value"] === $last_card3_value && $possible[$i]["card4_value"] > $last_card4_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_card3_value = $possible[$i]["card3_value"];
                $last_card4_value = $possible[$i]["card4_value"];
                $last_card5_value = $possible[$i]["card5_value"];
            } else if ($possible[$i]["card1_value"] === $last_card1_value && $possible[$i]["card2_value"] === $last_card2_value && $possible[$i]["card3_value"] === $last_card3_value && $possible[$i]["card4_value"] === $last_card4_value && $possible[$i]["card5_value"] > $last_card5_value) {
                $best_hand_index = $i;
                $last_card1_value = $possible[$i]["card1_value"];
                $last_card2_value = $possible[$i]["card2_value"];
                $last_card3_value = $possible[$i]["card3_value"];
                $last_card4_value = $possible[$i]["card4_value"];
                $last_card5_value = $possible[$i]["card5_value"];
            }
        }
        return $best_hand_index;
    }
    public function get_winner_indexes(array $hands, array $communityCards): array
    {
        if (count($hands) == 1) foreach ($hands as $index => $value) return [$index];
        $last_hand_value = 0;
        foreach ($hands as $index => $hand) {
            $hand_value = match (true) {
                $this->is_royal_flush($hand, $communityCards) => 10,
                $this->is_straight_flush($hand, $communityCards) => 9,
                $this->is_four_of_a_kind($hand, $communityCards) => 8,
                $this->is_full_house($hand, $communityCards) => 7,
                $this->is_flush($hand, $communityCards) => 6,
                $this->is_straight($hand, $communityCards) => 5,
                $this->is_three_of_a_kind($hand, $communityCards) => 4,
                $this->is_two_pair($hand, $communityCards) => 3,
                $this->is_pair($hand, $communityCards) => 2,
                $this->is_high_card($hand, $communityCards) => 1,
                default => 0,
            };
            if ($hand_value < $last_hand_value) unset($hands[$index]);
            else if ($hand_value >= $last_hand_value) {
                $last_hand_value = $hand_value;
            }
        }
        foreach ($hands as $index => $hand) {
            $hand_value = match (true) {
                $this->is_royal_flush($hand, $communityCards) => 10,
                $this->is_straight_flush($hand, $communityCards) => 9,
                $this->is_four_of_a_kind($hand, $communityCards) => 8,
                $this->is_full_house($hand, $communityCards) => 7,
                $this->is_flush($hand, $communityCards) => 6,
                $this->is_straight($hand, $communityCards) => 5,
                $this->is_three_of_a_kind($hand, $communityCards) => 4,
                $this->is_two_pair($hand, $communityCards) => 3,
                $this->is_pair($hand, $communityCards) => 2,
                $this->is_high_card($hand, $communityCards) => 1,
                default => 0,
            };
            if ($hand_value < $last_hand_value) unset($hands[$index]);
            else if ($hand_value >= $last_hand_value) {
                $last_hand_value = $hand_value;
            }
        }
        if (count($hands) == 1) foreach ($hands as $index => $value) return [$index];
                switch ($last_hand_value) {
            case 10:
                return $this->tie_break_royal_flush($hands, $communityCards);
            case 9:
                return $this->tie_break_straight_flush($hands, $communityCards);
            case 8:
                return $this->tie_break_four_of_a_kind($hands, $communityCards);
            case 7:
                return $this->tie_break_full_house($hands, $communityCards);
            case 6:
                return $this->tie_break_flush($hands, $communityCards);
            case 5:
                return $this->tie_break_straight($hands, $communityCards);
            case 4:
                return $this->tie_break_three_of_a_kind($hands, $communityCards);
            case 3:
                return $this->tie_break_two_pair($hands, $communityCards);
            case 2:
                return $this->tie_break_pair($hands, $communityCards);
            case 1:
                return $this->tie_break_high_card($hands, $communityCards);
            default:
                return [];
        }
    }
    private function tie_break_royal_flush(array $hands, array $communityCards): array
    {
                $indexes = [];
        foreach ($hands as $index => $hand) {
            $indexes[] = $index;
        }
        return $indexes;
    }
    private function tie_break_straight_flush(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_four_of_a_kind(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_full_house(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_flush(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_straight(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_three_of_a_kind(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_two_pair(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_pair(array $hands, array $communityCards): array
    {
        return [];
    }
    private function tie_break_high_card(array $hands, array $communityCards): array
    {
        return [];
    }
    private function get_combos_texas(array $holeCards, array $communityCards): array
    {
                if (count($communityCards) < 3) return [$holeCards];
        $combos = [];
        $cards = array_merge($holeCards, $communityCards);
        $n = count($cards);
        for ($i = 0; $i < $n; $i++) {
            for ($j = $i + 1; $j < $n; $j++) {
                for ($k = $j + 1; $k < $n; $k++) {
                    for ($l = $k + 1; $l < $n; $l++) {
                        for ($m = $l + 1; $m < $n; $m++) {
                            $combo = [$cards[$i], $cards[$j], $cards[$k], $cards[$l], $cards[$m]];
                            usort($combo, function ($a, $b) {
                                return $a->getRank()->numeric() <=> $b->getRank()->numeric();
                            });
                            $combos[] = $combo;
                        }
                    }
                }
            }
        }
        $combos = array_unique($combos, SORT_REGULAR);
        return $combos;
    }
}

enum Limit
{
    case NL;
    case PL;
    case FL;
    public function display(): string
    {
        return match ($this) {
            Limit::NL => 'No Limit',
            Limit::PL => 'Pot Limit',
            Limit::FL => 'Fixed Limit',
        };
    }
    public static function toArray(): array
    {
        return [
            Limit::NL,
            Limit::PL,
            Limit::FL,
        ];
    }
}

class Player
{
    private PlayerStatus $status = PlayerStatus::STANDING;
    private ?Pot $bankroll;
    public function __construct(
        private string $name,
        public PlayerType $type = PlayerType::HUMAN
    ) {
        $this->bankroll = new Pot(0);
    }
    public function getName(): string
    {
        return $this->name;
    }
    public function getBankroll(): Pot
    {
        return $this->bankroll;
    }
    public function setBankroll(Pot $bankroll): void
    {
        $this->bankroll = $bankroll;
    }
    public function setStatus(PlayerStatus $status): void
    {
        $this->status = $status;
    }
    public function __toString(): string
    {
        return $this->name;
    }
}

enum PlayerStatus
{
    case STANDING;
    case WAITING_FOR_TABLE;
    case SEAT_RESERVED;
    case SEATED;
}

enum PlayerType
{
    case HUMAN;
    case BOT;
}

class Pot
{
    public array $eligible = [];
    public function __construct(private float $amount = 0, public bool $good = true)
    {
        $this->amount = round($this->amount, 2);
    }
    public function add(float $amount): void
    {
        $this->amount += round($amount, 2);
    }
    public function remove(float $amount): void
    {
        $this->amount -= round($amount, 2);
    }
    public function getAmount(): float
    {
        return round($this->amount, 2);
    }
    public function setAmount(float $amount): void
    {
        $this->amount = round($amount, 2);
    }
    public function contribute(float $amount, Seat $seat)
    {
        $this->add($amount);
        $seat->getStack()->remove($amount);
        $this->eligible[] = $seat;
    }
    public function __toString(): string
    {
        return '$' . number_format($this->amount, 2, '.', ',');
    }
}

enum Rank: int
{
    case TWO = 2;
    case THREE = 3;
    case FOUR = 4;
    case FIVE = 5;
    case SIX = 6;
    case SEVEN = 7;
    case EIGHT = 8;
    case NINE = 9;
    case TEN = 10;
    case JACK = 11;
    case QUEEN = 12;
    case KING = 13;
    case ACE = 14;
    public function display(): string
    {
        return match ($this) {
            self::TWO => '2',
            self::THREE => '3',
            self::FOUR => '4',
            self::FIVE => '5',
            self::SIX => '6',
            self::SEVEN => '7',
            self::EIGHT => '8',
            self::NINE => '9',
            self::TEN => 'T',
            self::JACK => 'J',
            self::QUEEN => 'Q',
            self::KING => 'K',
            self::ACE => 'A',
        };
    }
    public function display_long(): string
    {
        return match ($this) {
            self::TWO => 'Two',
            self::THREE => 'Three',
            self::FOUR => 'Four',
            self::FIVE => 'Five',
            self::SIX => 'Six',
            self::SEVEN => 'Seven',
            self::EIGHT => 'Eight',
            self::NINE => 'Nine',
            self::TEN => 'Ten',
            self::JACK => 'Jack',
            self::QUEEN => 'Queen',
            self::KING => 'King',
            self::ACE => 'Ace',
        };
    }
    public function numeric(): int
    {
        return match ($this) {
            self::TWO => 2,
            self::THREE => 3,
            self::FOUR => 4,
            self::FIVE => 5,
            self::SIX => 6,
            self::SEVEN => 7,
            self::EIGHT => 8,
            self::NINE => 9,
            self::TEN => 10,
            self::JACK => 11,
            self::QUEEN => 12,
            self::KING => 13,
            self::ACE => 14,
        };
    }
    public static function toArray(): iterable
    {
        return [
            self::TWO,
            self::THREE,
            self::FOUR,
            self::FIVE,
            self::SIX,
            self::SEVEN,
            self::EIGHT,
            self::NINE,
            self::TEN,
            self::JACK,
            self::QUEEN,
            self::KING,
            self::ACE,
        ];
    }
}

class Seat
{
    private SeatStatus $status = SeatStatus::EMPTY;
    private ?Player $player = null;
    public array $cards = [];
    private Pot $stack;
    public function __construct()
    {
        $this->stack = new Pot(0);
    }
    public function getStatus(): SeatStatus
    {
        return $this->status;
    }
    public function setStatus(SeatStatus $status): void
    {
        $this->status = $status;
    }
    public function getPlayer(): ?Player
    {
        return $this->player;
    }
    public function setPlayer(Player $player): void
    {
        $this->player = $player;
    }
    public function getStack(): Pot
    {
        return $this->stack;
    }
    public function __toString(): string
    {
        return $this->player->getName();
    }
    public function clearCards(): void
    {
        $this->cards = [];
    }
    public function buyChips(float $amount): void
    {
        $amount = min($amount, $this->player->getBankroll()->getAmount());
        $this->player->getBankroll()->remove($amount);
        $this->stack->add($amount);
    }
    public function topUp(float $amount): void
    {
        $current_stack = $this->stack->getAmount();
        if ($current_stack < $amount) {
            $this->buyChips($amount - $current_stack);
        }
    }
    public function prompt(Table $table): void
    {
        switch ($this->player->type) {
            case PlayerType::HUMAN:
                                echo ($this->player->getName() . "\t" . $table->HandEvaluator->hand_toString($this->cards, $table->communityCards) . "\n");
                break;
            case PlayerType::BOT:
                                echo ($this->player->getName() . "\t" . $table->HandEvaluator->hand_toString($this->cards, $table->communityCards) . "\n");
                break;
        }
    }
}

enum SeatStatus
{
    case EMPTY;
    case RESERVED;
    case WAITING;
    case POSTED;
    case PLAYING;
    case SITOUT;
    case TIMEOUT;
    case FOLDED;
}

enum Suit
{
    case CLUBS;
    case DIAMONDS;
    case HEARTS;
    case SPADES;
    public function display(): string
    {
        return match ($this) {
            Suit::CLUBS => 'c',
            Suit::DIAMONDS => 'd',
            Suit::HEARTS => 'h',
            Suit::SPADES => 's',
        };
    }
    public function display_long(): string
    {
        return match ($this) {
            Suit::CLUBS => 'Club',
            Suit::DIAMONDS => 'Diamond',
            Suit::HEARTS => 'Heart',
            Suit::SPADES => 'Spade',
        };
    }
    public static function toArray(): array
    {
        return [
            Suit::CLUBS,
            Suit::DIAMONDS,
            Suit::HEARTS,
            Suit::SPADES,
        ];
    }
}

class Table
{
    public array $seats = [];
    private array $config = [
        "id" => null,
        "status" => TableStatus::WAITING_FOR_PLAYERS,
        "GameType" => GameType::TEXAS_HOLDEM,
        "seats" => 9,
        "smallBlind" => 1,
        "bigBlind" => 2,
        "limit" => Limit::NL,
        "minBuyIn" => 100,
        "maxBuyIn" => 1000,
        "straddles" => 0,
        "buttonstraddle" => false,
        "straddleAmount" => 4,
    ];
    public ?Deck $deck = null;
    public array $pots = [];
    public array $communityCards = [];
    public array $muck = [];
    public HandEvaluator $HandEvaluator;
    private int $button_position = 0;
    private int $action_position = 0;
    public array $chat_history = [];
    public function __construct(array $config = [])
    {
        $this->config = array_merge($this->config, $config);
        $this->createSeats();
        $this->deck = new Deck();
        $this->HandEvaluator = new HandEvaluator($this->config["GameType"]);
    }
    public function getSeats(): array
    {
        return $this->seats;
    }
    public function getGameType(): ?GameType
    {
        return $this->config['GameType'];
    }
    public function setGameType(GameType $GameType): void
    {
        $this->config['GameType'] = $GameType;
    }
    public function getConfig(): array
    {
        return $this->config;
    }
    public function setConfig(array $config): void
    {
        $this->config = array_merge($this->config, $config);
    }
    private function createSeats(): void
    {
        for ($i = 0; $i < $this->config['seats']; $i++) {
            $this->seats[] = new Seat();
        }
    }
    public function setStakes($minBuyIn, $maxBuyIn, $smallBlind, $bigBlind): void
    {
        $this->config['minBuyIn'] = $minBuyIn;
        $this->config['maxBuyIn'] = $maxBuyIn;
        $this->config['smallBlind'] = $smallBlind;
        $this->config['bigBlind'] = $bigBlind;
    }
    public function seatPlayer(Player $player, Seat $seat): Seat
    {
        $seat->setPlayer($player);
        $seat->setStatus(SeatStatus::WAITING);
        $player->setStatus(PlayerStatus::SEATED);
        return $seat;
    }
    public function reserveSeat(Player $player, Seat $seat): Seat
    {
        $seat->setPlayer($player);
        $seat->setStatus(SeatStatus::RESERVED);
        $player->setStatus(PlayerStatus::SEAT_RESERVED);
        return $seat;
    }
    public function new_hand(): void
    {
        echo ("=============================================================\n");
        $this->chat("Starting a new hand of " . $this->config["limit"]->display() . " " . $this->config['GameType']->display() . " [$" . $this->config['smallBlind'] . "/$" . $this->config['bigBlind'] . "]");
        $this->config['status'] = TableStatus::STARTING;
        $players_ready = $this->resetSeats();
        if ($players_ready < 2) {
            $this->chat("Not enough players to start a new hand.");
            return;
        }
        $this->muck = [];
        $this->communityCards = [];
        $this->pots = [];
        $this->pots[0] = new Pot(0, false);
        $this->advanceButton();
        $this->deck = new Deck();
        $this->action_position = $this->postBlinds();
        $this->deck->shuffle();
        $this->deck->cut();
        $this->dealHoleCards();
        $this->config['status'] = TableStatus::PREFLOP;
        $this->bettingRound();
        if ($this->config['status'] == TableStatus::HAND_OVER) return;
        $this->config['status'] = TableStatus::FLOP;
        $this->deck->dealCard($this->muck);
        $this->deck->dealCard($this->communityCards);
        $this->deck->dealCard($this->communityCards);
        $this->deck->dealCard($this->communityCards);
        echo ("========================================\n");
        $this->chat("Flop:\t[" . implode("] [", $this->communityCards) . "]");
        $this->bettingRound();
        if ($this->config['status'] == TableStatus::HAND_OVER) return;
        $this->config['status'] = TableStatus::TURN;
        $this->deck->dealCard($this->muck);
        $this->deck->dealCard($this->communityCards);
        echo ("========================================\n");
        $this->chat("Turn:\t[" . implode("] [", $this->communityCards) . "]");
        $this->bettingRound();
        if ($this->config['status'] == TableStatus::HAND_OVER) return;
        $this->config['status'] = TableStatus::RIVER;
        $this->deck->dealCard($this->muck);
        $this->deck->dealCard($this->communityCards);
        echo ("========================================\n");
        $this->chat("River:\t[" . implode("] [", $this->communityCards) . "]");
        $this->action_position = $this->button_position;
        $this->bettingRound();
        if ($this->config['status'] == TableStatus::HAND_OVER) return;
        $this->config['status'] = TableStatus::SHOWDOWN;
            }
    private function bettingRound(): void
    {
        $this->action_position = $this->button_position;
        $this->pots[0]->good = false;
        while (!$this->potsGood()) {
            $action_order = $this->getActionOrder();
            foreach ($action_order as $seat_number) {
                $seat = $this->seats[$seat_number];
                $seat->prompt($this);
            }
            $this->pots[0]->good = true;
        }
    }
    private function potsGood(): bool
    {
        foreach ($this->pots as $pot) {
            if (!$pot->good) return false;
        }
        return true;
    }
    private function getActionOrder(): array
    {
        $action_order = [];
        $seat_number = $this->action_position;
        while (true) {
            $seat_number++;
            if ($seat_number >= count($this->seats)) $seat_number = 0;
            $seat = $this->seats[$seat_number];
            if (in_array($seat->getStatus(), [SeatStatus::PLAYING, SeatStatus::POSTED])) $action_order[] = $seat_number;
            if ($seat_number == $this->action_position) break;
        }
        return $action_order;
    }
    private function dealHoleCards(): void
    {
        $deal_order = $this->getDealOrder();
        for ($i = 0; $i < $this->config["GameType"]->num_hole_cards(); $i++) {
            foreach ($deal_order as $seat_number) {
                $this->deck->dealCard($this->seats[$seat_number]->cards);
            }
        }
    }
    private function getDealOrder(): array
    {
        $deal_order = [];
        $seat_number = $this->button_position;
        while (true) {
            $seat_number++;
            if ($seat_number >= count($this->seats)) $seat_number = 0;
            $seat = $this->seats[$seat_number];
            if (in_array($seat->getStatus(), [SeatStatus::PLAYING, SeatStatus::POSTED])) $deal_order[] = $seat_number;
            if ($seat_number == $this->button_position) break;
        }
        return $deal_order;
    }
    private function postBlinds(): int
    {
        return $this->postBigBlind($this->postSmallBlind());
    }
    private function postSmallBlind(): int
    {
        $small_blind_amount = $this->config['smallBlind'];
        $small_blind_seat_number = $this->getNextActiveSeat($this->button_position);
        $small_blind_seat = $this->seats[$small_blind_seat_number];
        while ($small_blind_seat->getStack()->getAmount() < $small_blind_amount) {
            $small_blind_seat->setStatus(SeatStatus::SITOUT);
            $small_blind_seat_number = $this->getNextActiveSeat($this->button_position);
            $small_blind_seat = $this->seats[$small_blind_seat_number];
        }
        $this->pots[0]->contribute($small_blind_amount, $small_blind_seat);
        $small_blind_seat->setStatus(SeatStatus::POSTED);
        $this->chat($small_blind_seat->getPlayer()->getName() . " posts the small blind of $" . $small_blind_amount);
        return $small_blind_seat_number;
    }
    private function postBigBlind($small_blind_seat_number): int
    {
        $big_blind_amount = $this->config['bigBlind'];
        $big_blind_seat_number = $this->getNextActiveSeat($small_blind_seat_number);
        $big_blind_seat = $this->seats[$big_blind_seat_number];
        while ($big_blind_seat->getStack()->getAmount() < $big_blind_amount) {
            $big_blind_seat->setStatus(SeatStatus::SITOUT);
            $big_blind_seat_number = $this->getNextActiveSeat($this->button_position + 2);
            $big_blind_seat = $this->seats[$big_blind_seat_number];
        }
        $this->pots[0]->contribute($big_blind_amount, $big_blind_seat);
        $big_blind_seat->setStatus(SeatStatus::POSTED);
        $this->chat($big_blind_seat->getPlayer()->getName() . " posts the big blind of $" . $big_blind_amount);
        return $big_blind_seat_number;
    }
    private function advanceButton(): void
    {
                $this->button_position = $this->getNextActiveSeat($this->button_position);
        $this->chat("The button is at seat " . $this->button_position . ". ({$this->seats[$this->button_position]->getPlayer()->getName()})");
    }
    private function getNextActiveSeat($seat): int
    {
        $seat++;
        if ($seat >= count($this->seats)) $seat = 0;
        if (!in_array($this->seats[$seat]->getStatus(), [SeatStatus::PLAYING, SeatStatus::POSTED])) $seat = $this->getNextActiveSeat($seat);
        return $seat;
    }
    public function resetSeats(): int
    {
        $players_ready = 0;
        echo ("Seat\tBankroll\tChips In Play  \tPlayer Name\n");
        foreach ($this->seats as $seat_number => $seat) {
            $seat->clearCards();
            switch ($seat->getStatus()) {
                case SeatStatus::WAITING:
                case SeatStatus::POSTED:
                case SeatStatus::FOLDED:
                case SeatStatus::PLAYING:
                    if ($seat->getStack()->getAmount() < $this->config['bigBlind']) $seat->setStatus(SeatStatus::SITOUT);
                    else {
                        $seat->setStatus(SeatStatus::PLAYING);
                        $seat->topUp($this->config['maxBuyIn']);
                        $this->chat("$seat_number\t{$seat->getPlayer()->getBankRoll()}\t{$seat->getStack()}\t{$seat->getPlayer()->getName()}");
                        $players_ready++;
                    }
                    break;
                case SeatStatus::TIMEOUT:
                    $seat->setStatus(SeatStatus::SITOUT);
                    break;
                default:
                    break;
            }
        }
        return $players_ready;
    }
    public function chat($message)
    {
        $this->chat_history[] = $message;
        echo ($message . "\n");
    }
}

enum TableStatus: int
{
    case WAITING_FOR_PLAYERS = 0;
    case STARTING = 1;
    case PREFLOP = 2;
    case FLOP = 3;
    case TURN = 4;
    case RIVER = 5;
    case SHOWDOWN = 6;
    case HAND_OVER = 7;
    public function display(): string
    {
        return match ($this) {
            TableStatus::WAITING_FOR_PLAYERS => 'Waiting for players',
            TableStatus::STARTING => 'Starting',
            TableStatus::PREFLOP => 'Pre-flop',
            TableStatus::FLOP => 'Flop',
            TableStatus::TURN => 'Turn',
            TableStatus::RIVER => 'River',
            TableStatus::SHOWDOWN => 'Showdown',
            TableStatus::HAND_OVER => 'Hand over',
        };
    }
}

$build_info = json_decode(file_get_contents('build_info.json'), true);
echo ("poker (cli) v" . $build_info["number"] . " (built: " . $build_info["date"] . ")\n");
$casino = new Casino("My Casino");
$table = $casino->addTable(new Table([
    "id" => 1,
    "name" => "My Table",
    "seats" => 2,
]));
$player1 = $casino->addPlayer(new Player("Russell", PlayerType::HUMAN));
$casino->buyChips($player1, 10000);
$table->seatPlayer($player1, $table->seats[0])->buyChips(1000);
$player2 = $casino->addPlayer(new Player("Lily", PlayerType::BOT));
$casino->buyChips($player2, 10000);
$table->seatPlayer($player2, $table->seats[1])->buyChips(1000);
$table->new_hand();
foreach ($table->pots as $key => $pot) {
    echo ("Pot[$key]: " . $pot . "\n");
    $hands = [];
    foreach ($pot->eligible as $seat_num => $seat) {
        $hands[$seat_num] = $seat->cards;
    }
    $winning_seats = $table->HandEvaluator->get_winner_indexes($hands, $table->communityCards);
    print_r($winning_seats);
}
